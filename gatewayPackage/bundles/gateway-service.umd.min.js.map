{"version":3,"sources":["../../../projects/data-service/src/lib/data-service.service.ts","../../../projects/data-service/src/lib/data-service.component.ts","../../../projects/data-service/src/lib/data-service.module.ts"],"names":["DataService","injector","_router","_http","this","dataServiceCart","Subject","prototype","callRestful","type","url","options","params","body","_this","undefined","headers","Content-Type","Access-Control-Allow-Methods","access-control-allow-origin","headerData","Object","keys","length","headerKey","Date","getTime","getOptions","indexOf","responseType","withCredentials","get","pipe","map","res","catchError","err","handleError","post","put","delete","error","observableThrowError","showMessage","cssClass","msg","x","document","getElementById","classType","innerHTML","className","setTimeout","replace","getCookie","name","c","ca","cookie","split","caLen","cookieName","i","substring","deleteCookie","setCookie","value","expireDays","d","setTime","expires","toUTCString","timestampToData","ts","dd","getDate","mm","getMonth","getFullYear","getTimeFromTimestamp","isNoTime","Injectable","args","providedIn","Injector","Router","HttpClient","DataServiceComponent","ngOnInit","Component","selector","template","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["/**\n * Created by kuldeep on 10/4/17.\n */\n\n\nimport { throwError as observableThrowError, Observable, Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { Injector } from '@angular/core'\nimport { Router, NavigationStart } from \"@angular/router\";\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { catchError, map, refCount, publishLast, takeLast, take} from 'rxjs/operators';\n\ndeclare var $: any;\n\n\n// const API_KEY = makeStateKey('api');\n@Injectable(\n    {\n        providedIn:'root'\n    }\n)\nexport class DataService {\n    api: any;\n    public dataServiceCart: Subject<any> = new Subject<any>();\n\n    constructor(public injector: Injector, private _router: Router, private _http: HttpClient) {\n        \n    }\n\n    callRestful(type: string, url: string, options?: { params?: {}, body?: {}, headerData?: {} }) {\n        let params;\n        let body;\n\n        if (options != undefined && options['params'] != undefined)\n            params = options['params'];\n        if (options != undefined && options['body'] != undefined)\n            body = options['body'];\n\n        let headers = {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE',\n            'access-control-allow-origin': '*'\n        };\n\n        if (options && options.headerData && Object.keys(options.headerData).length) {\n            for(let headerKey in options.headerData){\n              headers[headerKey] = options.headerData[headerKey];\n            }\n            if (options.headerData['Content-Type']) {\n                headers['Content-Type'] = options.headerData['Content-Type'];\n            }\n            if (options.headerData['Access-Control-Allow-Methods']) {\n                headers['Access-Control-Allow-Methods'] = options.headerData['Access-Control-Allow-Methods'];\n            }\n            \n        }\n        let start_time = new Date().getTime();\n \n        switch (type) {\n            case 'GET':\n                let getOptions = {};\n                if (headers[\"Content-Type\"] && headers[\"Content-Type\"].indexOf(\"text\") > -1) {\n                    getOptions = { params: params, headers: headers, responseType: \"text\", withCredentials: true };\n                } else {\n                    getOptions = { params, headers, withCredentials: true };\n                }             \n                return this._http.get(url, getOptions).pipe(map(res => {\n                    let request_time = new Date().getTime() - start_time;\n                    return res;\n                }), catchError(err => this.handleError(err)));\n            case 'POST':\n                return this._http.post(url, body, { headers, withCredentials: true }).pipe(map(res => {\n                    let request_time = new Date().getTime() - start_time;\n                    return res;\n                }), catchError(err => this.handleError(err)));\n            case 'PUT':\n                return this._http.put(url, body, { headers, withCredentials: true }).pipe(map(res => res), catchError(err => this.handleError(err)));\n            case 'DELETE':\n                return this._http.delete(url, { headers, withCredentials: true }).pipe(map(res => res), catchError(err => this.handleError(err)));\n            default:\n                return null;\n        }\n    }\n    private handleError(error: HttpErrorResponse | any) {\n        return observableThrowError(error);;\n    }\n \n    showMessage(cssClass, msg) {\n        //console.log(\"show message cssClass \" + cssClass + \" msg is \" + msg);\n            var x = document.getElementById(\"alert-box\");\n            var classType = \"\";\n            x.innerHTML = msg;\n            if (cssClass == \"error\") classType = \"show-error\";\n            if (cssClass == \"success\") classType = \"show-sucess\";\n            x.className = classType;\n            setTimeout(function () {\n                x.className = x.className.replace(classType, \"\");\n            }, 5000);\n\n    }\n\n    public getCookie(name: string) {\n        //TODO test split and value\n            let ca: Array<string> = document.cookie.split('; ');\n            let caLen: number = ca.length;\n            let cookieName = name + \"=\";\n            let c: string;\n\n            for (let i: number = 0; i < caLen; i += 1) {\n                c = ca[i].replace(/^\\s\\+/g, \"\");\n                if (c.indexOf(cookieName) == 0) {\n                    return c.substring(cookieName.length, c.length);\n                }\n            }\n        return \"\";\n    }\n\n    public deleteCookie(name) {\n        this.setCookie(name, \"\", -1);\n    }\n\n    public setCookie(name: string, value: string, expireDays: number) {\n            let d: Date = new Date();\n            d.setTime(d.getTime() + expireDays * 24 * 60 * 60 * 1000);\n            let expires: string = \"expires=\" + d.toUTCString();\n            document.cookie = name + \"=\" + value + \"; \" + expires + \";\";\n    }\n\n    public timestampToData(ts) {\n        let d = new Date(ts);\n        let dd: any = d.getDate();\n        let mm: any = (d.getMonth() + 1);\n        let yy = d.getFullYear();\n\n        if (dd < 10) {\n            dd = '0' + dd;\n        }\n        if (mm < 10) {\n            mm = '0' + mm;\n        }\n        return dd + '-' + mm + '-' + yy;\n    }\n\n    public getTimeFromTimestamp(ts, isNoTime?: boolean) {\n    }\n\n}","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-dataService',\n  template: `\n    <p>\n      data-service works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class DataServiceComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { DataServiceComponent } from './data-service.component';\n\n\n\n@NgModule({\n  declarations: [DataServiceComponent],\n  imports: [\n  ],\n  exports: [DataServiceComponent]\n})\nexport class DataServiceModule { }\n"]}